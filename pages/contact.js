import {useState} from "react";
import {useForm} from "react-hook-form";
import {AnimatePresence, motion as m} from "framer-motion";
import {yupResolver} from "@hookform/resolvers/yup";
import * as yup from "yup";
import {IoCall, IoMail} from "react-icons/io5";
import ErrorMsg from "../components/ErrorMsg";
import Head from "next/head";
import Party from "../Utility/Party";
import Link from "next/link";

const maxTxtAreaLength = 400;
const email = "oliver.rindholt@gmail.com";
const phone = "25702404";
const emailRegEx =
	/^([^.][a-z,0-9,!#$%&'*+\-/=?^_`{|}~.]{1,64})([^.,\s]@)([a-z\-]{1,255})(\.[a-z0-9]{2,})$/gi;

const schema = yup
	.object({
		firstName: yup.string().required("Your first name is required"),
		lastName: yup.string().required("Your last name is required"),
		email: yup
			.string()
			.email("Invaild email")
			.matches(emailRegEx, "Invaild email")
			.required(),
		conEmail: yup
			.string()
			.required("You need to confirm your email")
			.oneOf([yup.ref("email")], "This email doesn't match"),
		msgArea: yup
			.string()
			.required("You need to write a message")
			.max(
				maxTxtAreaLength,
				"Did you really think you could bypass the max? THE MAX IS 400!"
			),
	})
	.required();

const Contact = () => {
	const [error, setError] = useState(true);
	const {
		register,
		handleSubmit,
		watch,
		formState: {errors},
	} = useForm({
		resolver: yupResolver(schema),
	});

	const onSubmit = data => {
		console.log(data);
		if (!Object.keys(errors).length) {
			setError(false);
			setTimeout(() => {
				setError(true);
			}, 4000);
		}
	};

	return (
		<>
			<Head>
				<title>Oliver R. - Contact</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<m.div initial={{opacity: 0}} animate={{opacity: 1}}>
				<m.h2
					initial={{opacity: 0, y: -20}}
					animate={{opacity: 1, y: 0}}
					transition={{type: "tween", delay: 1, duration: 1}}
					className="text-6xl font-bold text-center"
				>
					Contact{" "}
					<span className="hover:text-orange transition-colors">
						<Link href="/about">me</Link>
					</span>
				</m.h2>
				<m.p className="text-center font-light mb-14 dark:text-gray text-darkGray opacity-20 select-none">
					(at your own risk..)
				</m.p>
				<form
					className="grid grid-cols-2 gap-6 max-w-3xl mx-auto relative"
					onSubmit={handleSubmit(onSubmit)}
				>
					{Object.keys(errors).length ? (
						<ErrorMsg
							message={
								errors.firstName?.message ||
								errors.lastName?.message ||
								errors.email?.message ||
								errors.conEmail?.message ||
								errors.msgArea?.message
							}
						/>
					) : (
						""
					)}
					<input
						{...register("firstName")}
						autoComplete="given-name"
						type="text"
						placeholder="First name"
						className={`form-item ${errors.firstName && "border-red-500"}`}
					/>
					<input
						{...register("lastName")}
						autoComplete="family-name"
						type="text"
						placeholder="Last name"
						className={`form-item ${errors.lastName && "border-red-500"}`}
					/>
					<input
						{...register("email")}
						type="text"
						autoComplete="email"
						placeholder="Email"
						className={`form-item col-span-2 ${
							errors.email && "border-red-500"
						}`}
					/>
					<input
						{...register("conEmail")}
						type="text"
						autoComplete="none"
						placeholder="Confirm email"
						className={`form-item col-span-2 ${
							errors.conEmail && "border-red-500"
						}`}
					/>
					<div className="col-span-2 w-full relative">
						<textarea
							{...register("msgArea")}
							className={`form-item !resize-none w-full h-32 ${
								errors.msgArea && "border-red-500"
							}`}
							id="msgArea"
							maxLength={maxTxtAreaLength}
							placeholder="Message"
						></textarea>
						<label
							htmlFor="msgArea"
							className="absolute bottom-3 right-2 font-light text-sm text-gray select-none"
						>
							{watch("msgArea")?.length || 0}/{maxTxtAreaLength}
						</label>
					</div>
					<button
						type="submit"
						className="bg-orange rounded-md mx-auto col-span-2 text-white py-1 max-w-[11.25rem] w-full font-bold text-xl transition-all border-3 border-orange border-solid hover:bg-opacity-0 hover:text-orange hover:scale-105 active:scale-100"
					>
						Send
					</button>
				</form>
				<p className="my-4">Or</p>
				<div className="flex flex-col items-center">
					<a
						href={`mailto:${email}`}
						className="flex items-center justify-center gap-1 font-medium hover:scale-105 transition-transform hover:text-orange"
					>
						<IoMail />
						<p>{email}</p>
					</a>
					<a
						href={`tel:+45${phone}`}
						className="flex items-center justify-center gap-1 font-medium hover:scale-105 transition-transform hover:text-orange"
					>
						<IoCall />
						<p>+45 {phone}</p>
					</a>
				</div>
			</m.div>
			<AnimatePresence>
				{!error && (
					<m.div exit={{opacity: 0}} transition={{duration: 2}}>
						<Party />
					</m.div>
				)}
			</AnimatePresence>
		</>
	);
};

export default Contact;
